// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: cart.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const createCart = `-- name: CreateCart :one
INSERT INTO carts (
 user_id, total_price
) VALUES (
  $1, $2
)
RETURNING id, user_id, total_price
`

type CreateCartParams struct {
	UserID     uuid.UUID `json:"user_id"`
	TotalPrice float64   `json:"total_price"`
}

func (q *Queries) CreateCart(ctx context.Context, arg CreateCartParams) (Cart, error) {
	row := q.db.QueryRowContext(ctx, createCart, arg.UserID, arg.TotalPrice)
	var i Cart
	err := row.Scan(&i.ID, &i.UserID, &i.TotalPrice)
	return i, err
}

const getCart = `-- name: GetCart :one
SELECT id, user_id, total_price FROM carts
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetCart(ctx context.Context, id uuid.UUID) (Cart, error) {
	row := q.db.QueryRowContext(ctx, getCart, id)
	var i Cart
	err := row.Scan(&i.ID, &i.UserID, &i.TotalPrice)
	return i, err
}

const getCartByUserID = `-- name: GetCartByUserID :one
SELECT id, user_id, total_price FROM carts
WHERE user_id = $1 LIMIT 1
`

func (q *Queries) GetCartByUserID(ctx context.Context, userID uuid.UUID) (Cart, error) {
	row := q.db.QueryRowContext(ctx, getCartByUserID, userID)
	var i Cart
	err := row.Scan(&i.ID, &i.UserID, &i.TotalPrice)
	return i, err
}

const getCartForUpdate = `-- name: GetCartForUpdate :one
SELECT id, user_id, total_price FROM carts
WHERE id = $1 LIMIT 1
FOR NO KEY UPDATE
`

func (q *Queries) GetCartForUpdate(ctx context.Context, id uuid.UUID) (Cart, error) {
	row := q.db.QueryRowContext(ctx, getCartForUpdate, id)
	var i Cart
	err := row.Scan(&i.ID, &i.UserID, &i.TotalPrice)
	return i, err
}

const updateCart = `-- name: UpdateCart :one
UPDATE carts
  set total_price = $2
WHERE id = $1
RETURNING id, user_id, total_price
`

type UpdateCartParams struct {
	ID         uuid.UUID `json:"id"`
	TotalPrice float64   `json:"total_price"`
}

func (q *Queries) UpdateCart(ctx context.Context, arg UpdateCartParams) (Cart, error) {
	row := q.db.QueryRowContext(ctx, updateCart, arg.ID, arg.TotalPrice)
	var i Cart
	err := row.Scan(&i.ID, &i.UserID, &i.TotalPrice)
	return i, err
}
