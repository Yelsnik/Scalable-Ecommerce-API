// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: cart_item.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const addSubtotalPrice = `-- name: AddSubtotalPrice :one
SELECT COALESCE(SUM(sub_total), 0)::float AS total
FROM cartitems
WHERE cart = $1
`

func (q *Queries) AddSubtotalPrice(ctx context.Context, cart uuid.UUID) (float64, error) {
	row := q.db.QueryRowContext(ctx, addSubtotalPrice, cart)
	var total float64
	err := row.Scan(&total)
	return total, err
}

const createCartitem = `-- name: CreateCartitem :one
INSERT INTO cartitems (
  cart, product, quantity, price, currency, sub_total
) VALUES (
  $1, $2, $3, $4, $5, $6
)
RETURNING id, cart, product, quantity, price, currency, sub_total, created_at
`

type CreateCartitemParams struct {
	Cart     uuid.UUID `json:"cart"`
	Product  string    `json:"product"`
	Quantity int64     `json:"quantity"`
	Price    float64   `json:"price"`
	Currency string    `json:"currency"`
	SubTotal float64   `json:"sub_total"`
}

func (q *Queries) CreateCartitem(ctx context.Context, arg CreateCartitemParams) (Cartitem, error) {
	row := q.db.QueryRowContext(ctx, createCartitem,
		arg.Cart,
		arg.Product,
		arg.Quantity,
		arg.Price,
		arg.Currency,
		arg.SubTotal,
	)
	var i Cartitem
	err := row.Scan(
		&i.ID,
		&i.Cart,
		&i.Product,
		&i.Quantity,
		&i.Price,
		&i.Currency,
		&i.SubTotal,
		&i.CreatedAt,
	)
	return i, err
}

const deleteCartitem = `-- name: DeleteCartitem :exec
DELETE FROM cartitems
WHERE id = $1
`

func (q *Queries) DeleteCartitem(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteCartitem, id)
	return err
}

const getALLCartitemsForUpdate = `-- name: GetALLCartitemsForUpdate :many
SELECT id, cart, product, quantity, price, currency, sub_total, created_at FROM cartitems
FOR NO KEY UPDATE
`

func (q *Queries) GetALLCartitemsForUpdate(ctx context.Context) ([]Cartitem, error) {
	rows, err := q.db.QueryContext(ctx, getALLCartitemsForUpdate)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Cartitem
	for rows.Next() {
		var i Cartitem
		if err := rows.Scan(
			&i.ID,
			&i.Cart,
			&i.Product,
			&i.Quantity,
			&i.Price,
			&i.Currency,
			&i.SubTotal,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllCartitems = `-- name: GetAllCartitems :many
SELECT id, cart, product, quantity, price, currency, sub_total, created_at FROM cartitems
`

func (q *Queries) GetAllCartitems(ctx context.Context) ([]Cartitem, error) {
	rows, err := q.db.QueryContext(ctx, getAllCartitems)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Cartitem
	for rows.Next() {
		var i Cartitem
		if err := rows.Scan(
			&i.ID,
			&i.Cart,
			&i.Product,
			&i.Quantity,
			&i.Price,
			&i.Currency,
			&i.SubTotal,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCartitem = `-- name: GetCartitem :one
SELECT id, cart, product, quantity, price, currency, sub_total, created_at FROM cartitems
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetCartitem(ctx context.Context, id uuid.UUID) (Cartitem, error) {
	row := q.db.QueryRowContext(ctx, getCartitem, id)
	var i Cartitem
	err := row.Scan(
		&i.ID,
		&i.Cart,
		&i.Product,
		&i.Quantity,
		&i.Price,
		&i.Currency,
		&i.SubTotal,
		&i.CreatedAt,
	)
	return i, err
}

const getCartitemByProductID = `-- name: GetCartitemByProductID :one
SELECT id, cart, product, quantity, price, currency, sub_total, created_at FROM cartitems
WHERE product = $1 LIMIT 1
`

func (q *Queries) GetCartitemByProductID(ctx context.Context, product string) (Cartitem, error) {
	row := q.db.QueryRowContext(ctx, getCartitemByProductID, product)
	var i Cartitem
	err := row.Scan(
		&i.ID,
		&i.Cart,
		&i.Product,
		&i.Quantity,
		&i.Price,
		&i.Currency,
		&i.SubTotal,
		&i.CreatedAt,
	)
	return i, err
}

const getCartitemForUpdate = `-- name: GetCartitemForUpdate :one
SELECT id, cart, product, quantity, price, currency, sub_total, created_at FROM cartitems
WHERE id = $1
FOR NO KEY UPDATE
`

func (q *Queries) GetCartitemForUpdate(ctx context.Context, id uuid.UUID) (Cartitem, error) {
	row := q.db.QueryRowContext(ctx, getCartitemForUpdate, id)
	var i Cartitem
	err := row.Scan(
		&i.ID,
		&i.Cart,
		&i.Product,
		&i.Quantity,
		&i.Price,
		&i.Currency,
		&i.SubTotal,
		&i.CreatedAt,
	)
	return i, err
}

const getCartitemsByCartID = `-- name: GetCartitemsByCartID :many
SELECT id, cart, product, quantity, price, currency, sub_total, created_at FROM cartitems
WHERE cart = $1
ORDER BY cart
`

func (q *Queries) GetCartitemsByCartID(ctx context.Context, cart uuid.UUID) ([]Cartitem, error) {
	rows, err := q.db.QueryContext(ctx, getCartitemsByCartID, cart)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Cartitem
	for rows.Next() {
		var i Cartitem
		if err := rows.Scan(
			&i.ID,
			&i.Cart,
			&i.Product,
			&i.Quantity,
			&i.Price,
			&i.Currency,
			&i.SubTotal,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listCartitems = `-- name: ListCartitems :many
SELECT id, cart, product, quantity, price, currency, sub_total, created_at FROM cartitems
ORDER BY  id
LIMIT $1
OFFSET $2
`

type ListCartitemsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListCartitems(ctx context.Context, arg ListCartitemsParams) ([]Cartitem, error) {
	rows, err := q.db.QueryContext(ctx, listCartitems, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Cartitem
	for rows.Next() {
		var i Cartitem
		if err := rows.Scan(
			&i.ID,
			&i.Cart,
			&i.Product,
			&i.Quantity,
			&i.Price,
			&i.Currency,
			&i.SubTotal,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCartitem = `-- name: UpdateCartitem :one
UPDATE cartitems
  set quantity = $2,
  sub_total = $3
WHERE id = $1
RETURNING id, cart, product, quantity, price, currency, sub_total, created_at
`

type UpdateCartitemParams struct {
	ID       uuid.UUID `json:"id"`
	Quantity int64     `json:"quantity"`
	SubTotal float64   `json:"sub_total"`
}

func (q *Queries) UpdateCartitem(ctx context.Context, arg UpdateCartitemParams) (Cartitem, error) {
	row := q.db.QueryRowContext(ctx, updateCartitem, arg.ID, arg.Quantity, arg.SubTotal)
	var i Cartitem
	err := row.Scan(
		&i.ID,
		&i.Cart,
		&i.Product,
		&i.Quantity,
		&i.Price,
		&i.Currency,
		&i.SubTotal,
		&i.CreatedAt,
	)
	return i, err
}
