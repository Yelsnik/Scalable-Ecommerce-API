// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.0
//   protoc               v5.29.2
// source: cart-service/cart_item_service.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";
import { Timestamp } from "../google/protobuf/timestamp";
import { Cart } from "./cart";

export const protobufPackage = "cart";

export interface CartItemResponse {
  id: string;
  cart: string;
  product: string;
  quantity: number;
  price: number;
  currency: string;
  subTotal: number;
  createdAt: Timestamp | undefined;
}

export interface CartTxResult {
  cartItem: CartItemResponse | undefined;
  cart: Cart | undefined;
}

export interface RemoveCartTxResult {
  cart: Cart | undefined;
}

export interface GetCartItemByIDRequest {
  id: string;
}

export interface GetCartItemsByCartRequest {
  id: string;
}

export interface GetCartItemsByCartResponse {
  cartItem: CartItemResponse[];
}

export interface GetCartItemByProductIDRequest {
  id: string;
}

export interface AddtoCartRequest {
  productId: string;
  quantity: number;
  userId: string;
}

export interface UpdateCartTxRequest {
  id: string;
  quantity: number;
}

export interface RemoveCartTxRequest {
  id: string;
}

export const CART_PACKAGE_NAME = "cart";

export interface CartItemServiceClient {
  addToCartTx(request: AddtoCartRequest): Observable<CartTxResult>;

  updateCartTx(request: UpdateCartTxRequest): Observable<CartTxResult>;

  removeCartTx(request: RemoveCartTxRequest): Observable<RemoveCartTxResult>;

  getCartItem(request: GetCartItemByIDRequest): Observable<CartItemResponse>;

  getCartItemsByCart(request: GetCartItemsByCartRequest): Observable<GetCartItemsByCartResponse>;

  getCartItemByProductId(request: GetCartItemByProductIDRequest): Observable<CartItemResponse>;
}

export interface CartItemServiceController {
  addToCartTx(request: AddtoCartRequest): Promise<CartTxResult> | Observable<CartTxResult> | CartTxResult;

  updateCartTx(request: UpdateCartTxRequest): Promise<CartTxResult> | Observable<CartTxResult> | CartTxResult;

  removeCartTx(
    request: RemoveCartTxRequest,
  ): Promise<RemoveCartTxResult> | Observable<RemoveCartTxResult> | RemoveCartTxResult;

  getCartItem(
    request: GetCartItemByIDRequest,
  ): Promise<CartItemResponse> | Observable<CartItemResponse> | CartItemResponse;

  getCartItemsByCart(
    request: GetCartItemsByCartRequest,
  ): Promise<GetCartItemsByCartResponse> | Observable<GetCartItemsByCartResponse> | GetCartItemsByCartResponse;

  getCartItemByProductId(
    request: GetCartItemByProductIDRequest,
  ): Promise<CartItemResponse> | Observable<CartItemResponse> | CartItemResponse;
}

export function CartItemServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = [
      "addToCartTx",
      "updateCartTx",
      "removeCartTx",
      "getCartItem",
      "getCartItemsByCart",
      "getCartItemByProductId",
    ];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("CartItemService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("CartItemService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const CART_ITEM_SERVICE_NAME = "CartItemService";
