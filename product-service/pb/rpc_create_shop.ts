// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.0
//   protoc               v3.12.4
// source: rpc_create_shop.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Shop } from "./shop";

export const protobufPackage = "pb";

export interface CreateShopRequest {
  name: string;
  description: string;
  image: Uint8Array;
  imageName: string;
  shopOwner: string;
}

export interface CreateShopResponse {
  shop: Shop | undefined;
}

function createBaseCreateShopRequest(): CreateShopRequest {
  return { name: "", description: "", image: new Uint8Array(0), imageName: "", shopOwner: "" };
}

export const CreateShopRequest: MessageFns<CreateShopRequest> = {
  encode(message: CreateShopRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.description !== "") {
      writer.uint32(18).string(message.description);
    }
    if (message.image.length !== 0) {
      writer.uint32(26).bytes(message.image);
    }
    if (message.imageName !== "") {
      writer.uint32(34).string(message.imageName);
    }
    if (message.shopOwner !== "") {
      writer.uint32(42).string(message.shopOwner);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateShopRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateShopRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.description = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.image = reader.bytes();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.imageName = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.shopOwner = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateShopRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      image: isSet(object.image) ? bytesFromBase64(object.image) : new Uint8Array(0),
      imageName: isSet(object.imageName) ? globalThis.String(object.imageName) : "",
      shopOwner: isSet(object.shopOwner) ? globalThis.String(object.shopOwner) : "",
    };
  },

  toJSON(message: CreateShopRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.image.length !== 0) {
      obj.image = base64FromBytes(message.image);
    }
    if (message.imageName !== "") {
      obj.imageName = message.imageName;
    }
    if (message.shopOwner !== "") {
      obj.shopOwner = message.shopOwner;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CreateShopRequest>, I>>(base?: I): CreateShopRequest {
    return CreateShopRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CreateShopRequest>, I>>(object: I): CreateShopRequest {
    const message = createBaseCreateShopRequest();
    message.name = object.name ?? "";
    message.description = object.description ?? "";
    message.image = object.image ?? new Uint8Array(0);
    message.imageName = object.imageName ?? "";
    message.shopOwner = object.shopOwner ?? "";
    return message;
  },
};

function createBaseCreateShopResponse(): CreateShopResponse {
  return { shop: undefined };
}

export const CreateShopResponse: MessageFns<CreateShopResponse> = {
  encode(message: CreateShopResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.shop !== undefined) {
      Shop.encode(message.shop, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateShopResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateShopResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.shop = Shop.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateShopResponse {
    return { shop: isSet(object.shop) ? Shop.fromJSON(object.shop) : undefined };
  },

  toJSON(message: CreateShopResponse): unknown {
    const obj: any = {};
    if (message.shop !== undefined) {
      obj.shop = Shop.toJSON(message.shop);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CreateShopResponse>, I>>(base?: I): CreateShopResponse {
    return CreateShopResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CreateShopResponse>, I>>(object: I): CreateShopResponse {
    const message = createBaseCreateShopResponse();
    message.shop = (object.shop !== undefined && object.shop !== null) ? Shop.fromPartial(object.shop) : undefined;
    return message;
  },
};

function bytesFromBase64(b64: string): Uint8Array {
  if ((globalThis as any).Buffer) {
    return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
  } else {
    const bin = globalThis.atob(b64);
    const arr = new Uint8Array(bin.length);
    for (let i = 0; i < bin.length; ++i) {
      arr[i] = bin.charCodeAt(i);
    }
    return arr;
  }
}

function base64FromBytes(arr: Uint8Array): string {
  if ((globalThis as any).Buffer) {
    return globalThis.Buffer.from(arr).toString("base64");
  } else {
    const bin: string[] = [];
    arr.forEach((byte) => {
      bin.push(globalThis.String.fromCharCode(byte));
    });
    return globalThis.btoa(bin.join(""));
  }
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
