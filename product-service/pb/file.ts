// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.0
//   protoc               v3.12.4
// source: file.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Any } from "./google/protobuf/any";

export const protobufPackage = "pb";

export interface File {
  id: Any | undefined;
  buffer: Uint8Array;
  originalname: string;
  filename: string;
  size: number;
  chunksize: number;
  mimetype: string;
  bucketname: string;
  md5: string;
  contentType: string;
  metadata: Any | undefined;
}

function createBaseFile(): File {
  return {
    id: undefined,
    buffer: new Uint8Array(0),
    originalname: "",
    filename: "",
    size: 0,
    chunksize: 0,
    mimetype: "",
    bucketname: "",
    md5: "",
    contentType: "",
    metadata: undefined,
  };
}

export const File: MessageFns<File> = {
  encode(message: File, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== undefined) {
      Any.encode(message.id, writer.uint32(10).fork()).join();
    }
    if (message.buffer.length !== 0) {
      writer.uint32(18).bytes(message.buffer);
    }
    if (message.originalname !== "") {
      writer.uint32(26).string(message.originalname);
    }
    if (message.filename !== "") {
      writer.uint32(34).string(message.filename);
    }
    if (message.size !== 0) {
      writer.uint32(40).int64(message.size);
    }
    if (message.chunksize !== 0) {
      writer.uint32(48).int64(message.chunksize);
    }
    if (message.mimetype !== "") {
      writer.uint32(58).string(message.mimetype);
    }
    if (message.bucketname !== "") {
      writer.uint32(66).string(message.bucketname);
    }
    if (message.md5 !== "") {
      writer.uint32(74).string(message.md5);
    }
    if (message.contentType !== "") {
      writer.uint32(82).string(message.contentType);
    }
    if (message.metadata !== undefined) {
      Any.encode(message.metadata, writer.uint32(90).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): File {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFile();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = Any.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.buffer = reader.bytes();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.originalname = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.filename = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.size = longToNumber(reader.int64());
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.chunksize = longToNumber(reader.int64());
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.mimetype = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.bucketname = reader.string();
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.md5 = reader.string();
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.contentType = reader.string();
          continue;
        }
        case 11: {
          if (tag !== 90) {
            break;
          }

          message.metadata = Any.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): File {
    return {
      id: isSet(object.id) ? Any.fromJSON(object.id) : undefined,
      buffer: isSet(object.buffer) ? bytesFromBase64(object.buffer) : new Uint8Array(0),
      originalname: isSet(object.originalname) ? globalThis.String(object.originalname) : "",
      filename: isSet(object.filename) ? globalThis.String(object.filename) : "",
      size: isSet(object.size) ? globalThis.Number(object.size) : 0,
      chunksize: isSet(object.chunksize) ? globalThis.Number(object.chunksize) : 0,
      mimetype: isSet(object.mimetype) ? globalThis.String(object.mimetype) : "",
      bucketname: isSet(object.bucketname) ? globalThis.String(object.bucketname) : "",
      md5: isSet(object.md5) ? globalThis.String(object.md5) : "",
      contentType: isSet(object.contentType) ? globalThis.String(object.contentType) : "",
      metadata: isSet(object.metadata) ? Any.fromJSON(object.metadata) : undefined,
    };
  },

  toJSON(message: File): unknown {
    const obj: any = {};
    if (message.id !== undefined) {
      obj.id = Any.toJSON(message.id);
    }
    if (message.buffer.length !== 0) {
      obj.buffer = base64FromBytes(message.buffer);
    }
    if (message.originalname !== "") {
      obj.originalname = message.originalname;
    }
    if (message.filename !== "") {
      obj.filename = message.filename;
    }
    if (message.size !== 0) {
      obj.size = Math.round(message.size);
    }
    if (message.chunksize !== 0) {
      obj.chunksize = Math.round(message.chunksize);
    }
    if (message.mimetype !== "") {
      obj.mimetype = message.mimetype;
    }
    if (message.bucketname !== "") {
      obj.bucketname = message.bucketname;
    }
    if (message.md5 !== "") {
      obj.md5 = message.md5;
    }
    if (message.contentType !== "") {
      obj.contentType = message.contentType;
    }
    if (message.metadata !== undefined) {
      obj.metadata = Any.toJSON(message.metadata);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<File>, I>>(base?: I): File {
    return File.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<File>, I>>(object: I): File {
    const message = createBaseFile();
    message.id = (object.id !== undefined && object.id !== null) ? Any.fromPartial(object.id) : undefined;
    message.buffer = object.buffer ?? new Uint8Array(0);
    message.originalname = object.originalname ?? "";
    message.filename = object.filename ?? "";
    message.size = object.size ?? 0;
    message.chunksize = object.chunksize ?? 0;
    message.mimetype = object.mimetype ?? "";
    message.bucketname = object.bucketname ?? "";
    message.md5 = object.md5 ?? "";
    message.contentType = object.contentType ?? "";
    message.metadata = (object.metadata !== undefined && object.metadata !== null)
      ? Any.fromPartial(object.metadata)
      : undefined;
    return message;
  },
};

function bytesFromBase64(b64: string): Uint8Array {
  if ((globalThis as any).Buffer) {
    return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
  } else {
    const bin = globalThis.atob(b64);
    const arr = new Uint8Array(bin.length);
    for (let i = 0; i < bin.length; ++i) {
      arr[i] = bin.charCodeAt(i);
    }
    return arr;
  }
}

function base64FromBytes(arr: Uint8Array): string {
  if ((globalThis as any).Buffer) {
    return globalThis.Buffer.from(arr).toString("base64");
  } else {
    const bin: string[] = [];
    arr.forEach((byte) => {
      bin.push(globalThis.String.fromCharCode(byte));
    });
    return globalThis.btoa(bin.join(""));
  }
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
