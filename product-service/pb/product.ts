// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.0
//   protoc               v3.12.4
// source: product.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Any } from "./google/protobuf/any";
import { Timestamp } from "./google/protobuf/timestamp";

export const protobufPackage = "pb";

export interface Product {
  id: Any | undefined;
  category: string;
  productName: string;
  description: string;
  brand: string;
  image: string;
  countInStock: number;
  price: number;
  currency: string;
  shop: Any | undefined;
  rating: number;
  isFeatured: boolean;
  updatedAt: Date | undefined;
  createdAt: Date | undefined;
}

function createBaseProduct(): Product {
  return {
    id: undefined,
    category: "",
    productName: "",
    description: "",
    brand: "",
    image: "",
    countInStock: 0,
    price: 0,
    currency: "",
    shop: undefined,
    rating: 0,
    isFeatured: false,
    updatedAt: undefined,
    createdAt: undefined,
  };
}

export const Product: MessageFns<Product> = {
  encode(message: Product, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== undefined) {
      Any.encode(message.id, writer.uint32(10).fork()).join();
    }
    if (message.category !== "") {
      writer.uint32(18).string(message.category);
    }
    if (message.productName !== "") {
      writer.uint32(26).string(message.productName);
    }
    if (message.description !== "") {
      writer.uint32(34).string(message.description);
    }
    if (message.brand !== "") {
      writer.uint32(42).string(message.brand);
    }
    if (message.image !== "") {
      writer.uint32(50).string(message.image);
    }
    if (message.countInStock !== 0) {
      writer.uint32(56).int64(message.countInStock);
    }
    if (message.price !== 0) {
      writer.uint32(69).float(message.price);
    }
    if (message.currency !== "") {
      writer.uint32(74).string(message.currency);
    }
    if (message.shop !== undefined) {
      Any.encode(message.shop, writer.uint32(82).fork()).join();
    }
    if (message.rating !== 0) {
      writer.uint32(88).int64(message.rating);
    }
    if (message.isFeatured !== false) {
      writer.uint32(96).bool(message.isFeatured);
    }
    if (message.updatedAt !== undefined) {
      Timestamp.encode(toTimestamp(message.updatedAt), writer.uint32(106).fork()).join();
    }
    if (message.createdAt !== undefined) {
      Timestamp.encode(toTimestamp(message.createdAt), writer.uint32(114).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Product {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseProduct();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = Any.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.category = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.productName = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.description = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.brand = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.image = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.countInStock = longToNumber(reader.int64());
          continue;
        }
        case 8: {
          if (tag !== 69) {
            break;
          }

          message.price = reader.float();
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.currency = reader.string();
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.shop = Any.decode(reader, reader.uint32());
          continue;
        }
        case 11: {
          if (tag !== 88) {
            break;
          }

          message.rating = longToNumber(reader.int64());
          continue;
        }
        case 12: {
          if (tag !== 96) {
            break;
          }

          message.isFeatured = reader.bool();
          continue;
        }
        case 13: {
          if (tag !== 106) {
            break;
          }

          message.updatedAt = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 14: {
          if (tag !== 114) {
            break;
          }

          message.createdAt = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Product {
    return {
      id: isSet(object.id) ? Any.fromJSON(object.id) : undefined,
      category: isSet(object.category) ? globalThis.String(object.category) : "",
      productName: isSet(object.productName) ? globalThis.String(object.productName) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      brand: isSet(object.brand) ? globalThis.String(object.brand) : "",
      image: isSet(object.image) ? globalThis.String(object.image) : "",
      countInStock: isSet(object.countInStock) ? globalThis.Number(object.countInStock) : 0,
      price: isSet(object.price) ? globalThis.Number(object.price) : 0,
      currency: isSet(object.currency) ? globalThis.String(object.currency) : "",
      shop: isSet(object.shop) ? Any.fromJSON(object.shop) : undefined,
      rating: isSet(object.rating) ? globalThis.Number(object.rating) : 0,
      isFeatured: isSet(object.isFeatured) ? globalThis.Boolean(object.isFeatured) : false,
      updatedAt: isSet(object.updatedAt) ? fromJsonTimestamp(object.updatedAt) : undefined,
      createdAt: isSet(object.createdAt) ? fromJsonTimestamp(object.createdAt) : undefined,
    };
  },

  toJSON(message: Product): unknown {
    const obj: any = {};
    if (message.id !== undefined) {
      obj.id = Any.toJSON(message.id);
    }
    if (message.category !== "") {
      obj.category = message.category;
    }
    if (message.productName !== "") {
      obj.productName = message.productName;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.brand !== "") {
      obj.brand = message.brand;
    }
    if (message.image !== "") {
      obj.image = message.image;
    }
    if (message.countInStock !== 0) {
      obj.countInStock = Math.round(message.countInStock);
    }
    if (message.price !== 0) {
      obj.price = message.price;
    }
    if (message.currency !== "") {
      obj.currency = message.currency;
    }
    if (message.shop !== undefined) {
      obj.shop = Any.toJSON(message.shop);
    }
    if (message.rating !== 0) {
      obj.rating = Math.round(message.rating);
    }
    if (message.isFeatured !== false) {
      obj.isFeatured = message.isFeatured;
    }
    if (message.updatedAt !== undefined) {
      obj.updatedAt = message.updatedAt.toISOString();
    }
    if (message.createdAt !== undefined) {
      obj.createdAt = message.createdAt.toISOString();
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Product>, I>>(base?: I): Product {
    return Product.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Product>, I>>(object: I): Product {
    const message = createBaseProduct();
    message.id = (object.id !== undefined && object.id !== null) ? Any.fromPartial(object.id) : undefined;
    message.category = object.category ?? "";
    message.productName = object.productName ?? "";
    message.description = object.description ?? "";
    message.brand = object.brand ?? "";
    message.image = object.image ?? "";
    message.countInStock = object.countInStock ?? 0;
    message.price = object.price ?? 0;
    message.currency = object.currency ?? "";
    message.shop = (object.shop !== undefined && object.shop !== null) ? Any.fromPartial(object.shop) : undefined;
    message.rating = object.rating ?? 0;
    message.isFeatured = object.isFeatured ?? false;
    message.updatedAt = object.updatedAt ?? undefined;
    message.createdAt = object.createdAt ?? undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function toTimestamp(date: Date): Timestamp {
  const seconds = Math.trunc(date.getTime() / 1_000);
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
