// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: bid.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const createBid = `-- name: CreateBid :one
INSERT INTO bids (
  user_id,
  auction_id,
  amount
) VALUES (
  $1, $2, $3
) RETURNING id, user_id, auction_id, amount, bid_time
`

type CreateBidParams struct {
	UserID    uuid.UUID `json:"user_id"`
	AuctionID uuid.UUID `json:"auction_id"`
	Amount    float64   `json:"amount"`
}

func (q *Queries) CreateBid(ctx context.Context, arg CreateBidParams) (Bid, error) {
	row := q.db.QueryRow(ctx, createBid, arg.UserID, arg.AuctionID, arg.Amount)
	var i Bid
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.AuctionID,
		&i.Amount,
		&i.BidTime,
	)
	return i, err
}

const getBid = `-- name: GetBid :one
SELECT id, user_id, auction_id, amount, bid_time FROM bids
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetBid(ctx context.Context, id uuid.UUID) (Bid, error) {
	row := q.db.QueryRow(ctx, getBid, id)
	var i Bid
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.AuctionID,
		&i.Amount,
		&i.BidTime,
	)
	return i, err
}
