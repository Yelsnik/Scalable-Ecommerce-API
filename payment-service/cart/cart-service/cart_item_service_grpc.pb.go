// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.2
// source: cart-service/cart_item_service.proto

package cart

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	CartItemService_AddToCartTx_FullMethodName            = "/cart.CartItemService/AddToCartTx"
	CartItemService_UpdateCartTx_FullMethodName           = "/cart.CartItemService/UpdateCartTx"
	CartItemService_RemoveCartTx_FullMethodName           = "/cart.CartItemService/RemoveCartTx"
	CartItemService_GetCartItem_FullMethodName            = "/cart.CartItemService/GetCartItem"
	CartItemService_GetCartItemsByCart_FullMethodName     = "/cart.CartItemService/GetCartItemsByCart"
	CartItemService_GetCartItemByProductID_FullMethodName = "/cart.CartItemService/GetCartItemByProductID"
)

// CartItemServiceClient is the client API for CartItemService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CartItemServiceClient interface {
	AddToCartTx(ctx context.Context, in *AddtoCartRequest, opts ...grpc.CallOption) (*CartTxResult, error)
	UpdateCartTx(ctx context.Context, in *UpdateCartTxRequest, opts ...grpc.CallOption) (*CartTxResult, error)
	RemoveCartTx(ctx context.Context, in *RemoveCartTxRequest, opts ...grpc.CallOption) (*RemoveCartTxResult, error)
	GetCartItem(ctx context.Context, in *GetCartItemByIDRequest, opts ...grpc.CallOption) (*CartItemResponse, error)
	GetCartItemsByCart(ctx context.Context, in *GetCartItemsByCartRequest, opts ...grpc.CallOption) (*GetCartItemsByCartResponse, error)
	GetCartItemByProductID(ctx context.Context, in *GetCartItemByProductIDRequest, opts ...grpc.CallOption) (*CartItemResponse, error)
}

type cartItemServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCartItemServiceClient(cc grpc.ClientConnInterface) CartItemServiceClient {
	return &cartItemServiceClient{cc}
}

func (c *cartItemServiceClient) AddToCartTx(ctx context.Context, in *AddtoCartRequest, opts ...grpc.CallOption) (*CartTxResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CartTxResult)
	err := c.cc.Invoke(ctx, CartItemService_AddToCartTx_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cartItemServiceClient) UpdateCartTx(ctx context.Context, in *UpdateCartTxRequest, opts ...grpc.CallOption) (*CartTxResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CartTxResult)
	err := c.cc.Invoke(ctx, CartItemService_UpdateCartTx_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cartItemServiceClient) RemoveCartTx(ctx context.Context, in *RemoveCartTxRequest, opts ...grpc.CallOption) (*RemoveCartTxResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveCartTxResult)
	err := c.cc.Invoke(ctx, CartItemService_RemoveCartTx_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cartItemServiceClient) GetCartItem(ctx context.Context, in *GetCartItemByIDRequest, opts ...grpc.CallOption) (*CartItemResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CartItemResponse)
	err := c.cc.Invoke(ctx, CartItemService_GetCartItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cartItemServiceClient) GetCartItemsByCart(ctx context.Context, in *GetCartItemsByCartRequest, opts ...grpc.CallOption) (*GetCartItemsByCartResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCartItemsByCartResponse)
	err := c.cc.Invoke(ctx, CartItemService_GetCartItemsByCart_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cartItemServiceClient) GetCartItemByProductID(ctx context.Context, in *GetCartItemByProductIDRequest, opts ...grpc.CallOption) (*CartItemResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CartItemResponse)
	err := c.cc.Invoke(ctx, CartItemService_GetCartItemByProductID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CartItemServiceServer is the server API for CartItemService service.
// All implementations must embed UnimplementedCartItemServiceServer
// for forward compatibility.
type CartItemServiceServer interface {
	AddToCartTx(context.Context, *AddtoCartRequest) (*CartTxResult, error)
	UpdateCartTx(context.Context, *UpdateCartTxRequest) (*CartTxResult, error)
	RemoveCartTx(context.Context, *RemoveCartTxRequest) (*RemoveCartTxResult, error)
	GetCartItem(context.Context, *GetCartItemByIDRequest) (*CartItemResponse, error)
	GetCartItemsByCart(context.Context, *GetCartItemsByCartRequest) (*GetCartItemsByCartResponse, error)
	GetCartItemByProductID(context.Context, *GetCartItemByProductIDRequest) (*CartItemResponse, error)
	mustEmbedUnimplementedCartItemServiceServer()
}

// UnimplementedCartItemServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCartItemServiceServer struct{}

func (UnimplementedCartItemServiceServer) AddToCartTx(context.Context, *AddtoCartRequest) (*CartTxResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddToCartTx not implemented")
}
func (UnimplementedCartItemServiceServer) UpdateCartTx(context.Context, *UpdateCartTxRequest) (*CartTxResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCartTx not implemented")
}
func (UnimplementedCartItemServiceServer) RemoveCartTx(context.Context, *RemoveCartTxRequest) (*RemoveCartTxResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveCartTx not implemented")
}
func (UnimplementedCartItemServiceServer) GetCartItem(context.Context, *GetCartItemByIDRequest) (*CartItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCartItem not implemented")
}
func (UnimplementedCartItemServiceServer) GetCartItemsByCart(context.Context, *GetCartItemsByCartRequest) (*GetCartItemsByCartResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCartItemsByCart not implemented")
}
func (UnimplementedCartItemServiceServer) GetCartItemByProductID(context.Context, *GetCartItemByProductIDRequest) (*CartItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCartItemByProductID not implemented")
}
func (UnimplementedCartItemServiceServer) mustEmbedUnimplementedCartItemServiceServer() {}
func (UnimplementedCartItemServiceServer) testEmbeddedByValue()                         {}

// UnsafeCartItemServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CartItemServiceServer will
// result in compilation errors.
type UnsafeCartItemServiceServer interface {
	mustEmbedUnimplementedCartItemServiceServer()
}

func RegisterCartItemServiceServer(s grpc.ServiceRegistrar, srv CartItemServiceServer) {
	// If the following call pancis, it indicates UnimplementedCartItemServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&CartItemService_ServiceDesc, srv)
}

func _CartItemService_AddToCartTx_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddtoCartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CartItemServiceServer).AddToCartTx(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CartItemService_AddToCartTx_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CartItemServiceServer).AddToCartTx(ctx, req.(*AddtoCartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CartItemService_UpdateCartTx_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCartTxRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CartItemServiceServer).UpdateCartTx(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CartItemService_UpdateCartTx_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CartItemServiceServer).UpdateCartTx(ctx, req.(*UpdateCartTxRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CartItemService_RemoveCartTx_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveCartTxRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CartItemServiceServer).RemoveCartTx(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CartItemService_RemoveCartTx_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CartItemServiceServer).RemoveCartTx(ctx, req.(*RemoveCartTxRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CartItemService_GetCartItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCartItemByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CartItemServiceServer).GetCartItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CartItemService_GetCartItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CartItemServiceServer).GetCartItem(ctx, req.(*GetCartItemByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CartItemService_GetCartItemsByCart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCartItemsByCartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CartItemServiceServer).GetCartItemsByCart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CartItemService_GetCartItemsByCart_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CartItemServiceServer).GetCartItemsByCart(ctx, req.(*GetCartItemsByCartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CartItemService_GetCartItemByProductID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCartItemByProductIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CartItemServiceServer).GetCartItemByProductID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CartItemService_GetCartItemByProductID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CartItemServiceServer).GetCartItemByProductID(ctx, req.(*GetCartItemByProductIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CartItemService_ServiceDesc is the grpc.ServiceDesc for CartItemService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CartItemService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cart.CartItemService",
	HandlerType: (*CartItemServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddToCartTx",
			Handler:    _CartItemService_AddToCartTx_Handler,
		},
		{
			MethodName: "UpdateCartTx",
			Handler:    _CartItemService_UpdateCartTx_Handler,
		},
		{
			MethodName: "RemoveCartTx",
			Handler:    _CartItemService_RemoveCartTx_Handler,
		},
		{
			MethodName: "GetCartItem",
			Handler:    _CartItemService_GetCartItem_Handler,
		},
		{
			MethodName: "GetCartItemsByCart",
			Handler:    _CartItemService_GetCartItemsByCart_Handler,
		},
		{
			MethodName: "GetCartItemByProductID",
			Handler:    _CartItemService_GetCartItemByProductID_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cart-service/cart_item_service.proto",
}
