// Code generated by MockGen. DO NOT EDIT.
// Source: payment-service/db/sqlc (interfaces: Store)

// Package mockdb is a generated GoMock package.
package mockdb

import (
	context "context"
	db "payment-service/db/sqlc"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// CreateOrderTx mocks base method.
func (m *MockStore) CreateOrderTx(arg0 context.Context, arg1 db.OrderTxParams) (db.OrderTxResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrderTx", arg0, arg1)
	ret0, _ := ret[0].(db.OrderTxResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrderTx indicates an expected call of CreateOrderTx.
func (mr *MockStoreMockRecorder) CreateOrderTx(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrderTx", reflect.TypeOf((*MockStore)(nil).CreateOrderTx), arg0, arg1)
}

// CreateOrderitems mocks base method.
func (m *MockStore) CreateOrderitems(arg0 context.Context, arg1 db.CreateOrderitemsParams) (db.OrderItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrderitems", arg0, arg1)
	ret0, _ := ret[0].(db.OrderItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrderitems indicates an expected call of CreateOrderitems.
func (mr *MockStoreMockRecorder) CreateOrderitems(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrderitems", reflect.TypeOf((*MockStore)(nil).CreateOrderitems), arg0, arg1)
}

// CreateOrders mocks base method.
func (m *MockStore) CreateOrders(arg0 context.Context, arg1 db.CreateOrdersParams) (db.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrders", arg0, arg1)
	ret0, _ := ret[0].(db.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrders indicates an expected call of CreateOrders.
func (mr *MockStoreMockRecorder) CreateOrders(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrders", reflect.TypeOf((*MockStore)(nil).CreateOrders), arg0, arg1)
}

// CreatePayment mocks base method.
func (m *MockStore) CreatePayment(arg0 context.Context, arg1 db.CreatePaymentParams) (db.Payment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePayment", arg0, arg1)
	ret0, _ := ret[0].(db.Payment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePayment indicates an expected call of CreatePayment.
func (mr *MockStoreMockRecorder) CreatePayment(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePayment", reflect.TypeOf((*MockStore)(nil).CreatePayment), arg0, arg1)
}

// CreateStripeCustomer mocks base method.
func (m *MockStore) CreateStripeCustomer(arg0 context.Context, arg1 db.CreateStripeCustomerParams) (db.StripeCustomer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateStripeCustomer", arg0, arg1)
	ret0, _ := ret[0].(db.StripeCustomer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateStripeCustomer indicates an expected call of CreateStripeCustomer.
func (mr *MockStoreMockRecorder) CreateStripeCustomer(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateStripeCustomer", reflect.TypeOf((*MockStore)(nil).CreateStripeCustomer), arg0, arg1)
}

// GetOrderitemByOrderID mocks base method.
func (m *MockStore) GetOrderitemByOrderID(arg0 context.Context, arg1 uuid.UUID) (db.OrderItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrderitemByOrderID", arg0, arg1)
	ret0, _ := ret[0].(db.OrderItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrderitemByOrderID indicates an expected call of GetOrderitemByOrderID.
func (mr *MockStoreMockRecorder) GetOrderitemByOrderID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrderitemByOrderID", reflect.TypeOf((*MockStore)(nil).GetOrderitemByOrderID), arg0, arg1)
}

// GetOrderitems mocks base method.
func (m *MockStore) GetOrderitems(arg0 context.Context, arg1 uuid.UUID) (db.OrderItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrderitems", arg0, arg1)
	ret0, _ := ret[0].(db.OrderItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrderitems indicates an expected call of GetOrderitems.
func (mr *MockStoreMockRecorder) GetOrderitems(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrderitems", reflect.TypeOf((*MockStore)(nil).GetOrderitems), arg0, arg1)
}

// GetOrderitemsByOrderID mocks base method.
func (m *MockStore) GetOrderitemsByOrderID(arg0 context.Context, arg1 uuid.UUID) ([]db.OrderItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrderitemsByOrderID", arg0, arg1)
	ret0, _ := ret[0].([]db.OrderItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrderitemsByOrderID indicates an expected call of GetOrderitemsByOrderID.
func (mr *MockStoreMockRecorder) GetOrderitemsByOrderID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrderitemsByOrderID", reflect.TypeOf((*MockStore)(nil).GetOrderitemsByOrderID), arg0, arg1)
}

// GetOrderitemsForUpdate mocks base method.
func (m *MockStore) GetOrderitemsForUpdate(arg0 context.Context, arg1 uuid.UUID) (db.OrderItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrderitemsForUpdate", arg0, arg1)
	ret0, _ := ret[0].(db.OrderItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrderitemsForUpdate indicates an expected call of GetOrderitemsForUpdate.
func (mr *MockStoreMockRecorder) GetOrderitemsForUpdate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrderitemsForUpdate", reflect.TypeOf((*MockStore)(nil).GetOrderitemsForUpdate), arg0, arg1)
}

// GetOrdersByBuyerID mocks base method.
func (m *MockStore) GetOrdersByBuyerID(arg0 context.Context, arg1 uuid.UUID) (db.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrdersByBuyerID", arg0, arg1)
	ret0, _ := ret[0].(db.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrdersByBuyerID indicates an expected call of GetOrdersByBuyerID.
func (mr *MockStoreMockRecorder) GetOrdersByBuyerID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrdersByBuyerID", reflect.TypeOf((*MockStore)(nil).GetOrdersByBuyerID), arg0, arg1)
}

// GetOrdersByID mocks base method.
func (m *MockStore) GetOrdersByID(arg0 context.Context, arg1 uuid.UUID) (db.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrdersByID", arg0, arg1)
	ret0, _ := ret[0].(db.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrdersByID indicates an expected call of GetOrdersByID.
func (mr *MockStoreMockRecorder) GetOrdersByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrdersByID", reflect.TypeOf((*MockStore)(nil).GetOrdersByID), arg0, arg1)
}

// GetOrdersBySellerID mocks base method.
func (m *MockStore) GetOrdersBySellerID(arg0 context.Context, arg1 uuid.UUID) (db.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrdersBySellerID", arg0, arg1)
	ret0, _ := ret[0].(db.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrdersBySellerID indicates an expected call of GetOrdersBySellerID.
func (mr *MockStoreMockRecorder) GetOrdersBySellerID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrdersBySellerID", reflect.TypeOf((*MockStore)(nil).GetOrdersBySellerID), arg0, arg1)
}

// GetOrdersForUpdate mocks base method.
func (m *MockStore) GetOrdersForUpdate(arg0 context.Context, arg1 uuid.UUID) (db.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrdersForUpdate", arg0, arg1)
	ret0, _ := ret[0].(db.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrdersForUpdate indicates an expected call of GetOrdersForUpdate.
func (mr *MockStoreMockRecorder) GetOrdersForUpdate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrdersForUpdate", reflect.TypeOf((*MockStore)(nil).GetOrdersForUpdate), arg0, arg1)
}

// GetPayment mocks base method.
func (m *MockStore) GetPayment(arg0 context.Context, arg1 string) (db.Payment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPayment", arg0, arg1)
	ret0, _ := ret[0].(db.Payment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPayment indicates an expected call of GetPayment.
func (mr *MockStoreMockRecorder) GetPayment(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPayment", reflect.TypeOf((*MockStore)(nil).GetPayment), arg0, arg1)
}

// GetPaymentByUserID mocks base method.
func (m *MockStore) GetPaymentByUserID(arg0 context.Context, arg1 uuid.UUID) (db.Payment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPaymentByUserID", arg0, arg1)
	ret0, _ := ret[0].(db.Payment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPaymentByUserID indicates an expected call of GetPaymentByUserID.
func (mr *MockStoreMockRecorder) GetPaymentByUserID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPaymentByUserID", reflect.TypeOf((*MockStore)(nil).GetPaymentByUserID), arg0, arg1)
}

// GetStripeCustomerById mocks base method.
func (m *MockStore) GetStripeCustomerById(arg0 context.Context, arg1 string) (db.StripeCustomer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStripeCustomerById", arg0, arg1)
	ret0, _ := ret[0].(db.StripeCustomer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStripeCustomerById indicates an expected call of GetStripeCustomerById.
func (mr *MockStoreMockRecorder) GetStripeCustomerById(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStripeCustomerById", reflect.TypeOf((*MockStore)(nil).GetStripeCustomerById), arg0, arg1)
}

// GetStripeCustomerByUserId mocks base method.
func (m *MockStore) GetStripeCustomerByUserId(arg0 context.Context, arg1 uuid.UUID) (db.StripeCustomer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStripeCustomerByUserId", arg0, arg1)
	ret0, _ := ret[0].(db.StripeCustomer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStripeCustomerByUserId indicates an expected call of GetStripeCustomerByUserId.
func (mr *MockStoreMockRecorder) GetStripeCustomerByUserId(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStripeCustomerByUserId", reflect.TypeOf((*MockStore)(nil).GetStripeCustomerByUserId), arg0, arg1)
}

// UpdateOrders mocks base method.
func (m *MockStore) UpdateOrders(arg0 context.Context, arg1 db.UpdateOrdersParams) (db.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOrders", arg0, arg1)
	ret0, _ := ret[0].(db.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateOrders indicates an expected call of UpdateOrders.
func (mr *MockStoreMockRecorder) UpdateOrders(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrders", reflect.TypeOf((*MockStore)(nil).UpdateOrders), arg0, arg1)
}

// UpdatePaymentStatus mocks base method.
func (m *MockStore) UpdatePaymentStatus(arg0 context.Context, arg1 db.UpdatePaymentStatusParams) (db.Payment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePaymentStatus", arg0, arg1)
	ret0, _ := ret[0].(db.Payment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePaymentStatus indicates an expected call of UpdatePaymentStatus.
func (mr *MockStoreMockRecorder) UpdatePaymentStatus(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePaymentStatus", reflect.TypeOf((*MockStore)(nil).UpdatePaymentStatus), arg0, arg1)
}
