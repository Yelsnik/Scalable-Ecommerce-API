// Code generated by MockGen. DO NOT EDIT.
// Source: payment-service/stripe (interfaces: Stripe)

// Package stripemck is a generated GoMock package.
package stripemck

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	stripe "github.com/stripe/stripe-go/v81"
)

// MockStripe is a mock of Stripe interface.
type MockStripe struct {
	ctrl     *gomock.Controller
	recorder *MockStripeMockRecorder
}

// MockStripeMockRecorder is the mock recorder for MockStripe.
type MockStripeMockRecorder struct {
	mock *MockStripe
}

// NewMockStripe creates a new mock instance.
func NewMockStripe(ctrl *gomock.Controller) *MockStripe {
	mock := &MockStripe{ctrl: ctrl}
	mock.recorder = &MockStripeMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStripe) EXPECT() *MockStripeMockRecorder {
	return m.recorder
}

// AttachPaymentMethod mocks base method.
func (m *MockStripe) AttachPaymentMethod(arg0 string, arg1 *stripe.PaymentMethodAttachParams) (*stripe.PaymentMethod, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AttachPaymentMethod", arg0, arg1)
	ret0, _ := ret[0].(*stripe.PaymentMethod)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AttachPaymentMethod indicates an expected call of AttachPaymentMethod.
func (mr *MockStripeMockRecorder) AttachPaymentMethod(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AttachPaymentMethod", reflect.TypeOf((*MockStripe)(nil).AttachPaymentMethod), arg0, arg1)
}

// NewCustomer mocks base method.
func (m *MockStripe) NewCustomer(arg0 *stripe.CustomerParams) (*stripe.Customer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewCustomer", arg0)
	ret0, _ := ret[0].(*stripe.Customer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewCustomer indicates an expected call of NewCustomer.
func (mr *MockStripeMockRecorder) NewCustomer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewCustomer", reflect.TypeOf((*MockStripe)(nil).NewCustomer), arg0)
}

// NewPaymentIntent mocks base method.
func (m *MockStripe) NewPaymentIntent(arg0 *stripe.PaymentIntentParams) (*stripe.PaymentIntent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewPaymentIntent", arg0)
	ret0, _ := ret[0].(*stripe.PaymentIntent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewPaymentIntent indicates an expected call of NewPaymentIntent.
func (mr *MockStripeMockRecorder) NewPaymentIntent(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewPaymentIntent", reflect.TypeOf((*MockStripe)(nil).NewPaymentIntent), arg0)
}

// Webhook mocks base method.
func (m *MockStripe) Webhook(arg0, arg1, arg2 string) (stripe.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Webhook", arg0, arg1, arg2)
	ret0, _ := ret[0].(stripe.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Webhook indicates an expected call of Webhook.
func (mr *MockStripeMockRecorder) Webhook(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Webhook", reflect.TypeOf((*MockStripe)(nil).Webhook), arg0, arg1, arg2)
}
