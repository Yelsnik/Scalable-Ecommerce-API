// Code generated by MockGen. DO NOT EDIT.
// Source: payment-service/client (interfaces: ClientInterface)

// Package clientdb is a generated GoMock package.
package clientdb

import (
	context "context"
	cart "payment-service/cart/cart-service"
	product "payment-service/product/product-service"
	pb "payment-service/user/user-service"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockClientInterface is a mock of ClientInterface interface.
type MockClientInterface struct {
	ctrl     *gomock.Controller
	recorder *MockClientInterfaceMockRecorder
}

// MockClientInterfaceMockRecorder is the mock recorder for MockClientInterface.
type MockClientInterfaceMockRecorder struct {
	mock *MockClientInterface
}

// NewMockClientInterface creates a new mock instance.
func NewMockClientInterface(ctrl *gomock.Controller) *MockClientInterface {
	mock := &MockClientInterface{ctrl: ctrl}
	mock.recorder = &MockClientInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClientInterface) EXPECT() *MockClientInterfaceMockRecorder {
	return m.recorder
}

// GetCartItem mocks base method.
func (m *MockClientInterface) GetCartItem(arg0 context.Context, arg1 string) (*cart.CartItemResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCartItem", arg0, arg1)
	ret0, _ := ret[0].(*cart.CartItemResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCartItem indicates an expected call of GetCartItem.
func (mr *MockClientInterfaceMockRecorder) GetCartItem(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCartItem", reflect.TypeOf((*MockClientInterface)(nil).GetCartItem), arg0, arg1)
}

// GetProductByID mocks base method.
func (m *MockClientInterface) GetProductByID(arg0 context.Context, arg1 string) (*product.ProductResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProductByID", arg0, arg1)
	ret0, _ := ret[0].(*product.ProductResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProductByID indicates an expected call of GetProductByID.
func (mr *MockClientInterfaceMockRecorder) GetProductByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProductByID", reflect.TypeOf((*MockClientInterface)(nil).GetProductByID), arg0, arg1)
}

// GetShopByID mocks base method.
func (m *MockClientInterface) GetShopByID(arg0 context.Context, arg1 string) (*product.ShopResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetShopByID", arg0, arg1)
	ret0, _ := ret[0].(*product.ShopResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetShopByID indicates an expected call of GetShopByID.
func (mr *MockClientInterfaceMockRecorder) GetShopByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetShopByID", reflect.TypeOf((*MockClientInterface)(nil).GetShopByID), arg0, arg1)
}

// GetStripeSellerAccount mocks base method.
func (m *MockClientInterface) GetStripeSellerAccount(arg0 context.Context, arg1 string) (*pb.StripeSellerAccountResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStripeSellerAccount", arg0, arg1)
	ret0, _ := ret[0].(*pb.StripeSellerAccountResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStripeSellerAccount indicates an expected call of GetStripeSellerAccount.
func (mr *MockClientInterfaceMockRecorder) GetStripeSellerAccount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStripeSellerAccount", reflect.TypeOf((*MockClientInterface)(nil).GetStripeSellerAccount), arg0, arg1)
}

// GetUserByEmail mocks base method.
func (m *MockClientInterface) GetUserByEmail(arg0 context.Context, arg1 string) (*pb.GetUserByEmailResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByEmail", arg0, arg1)
	ret0, _ := ret[0].(*pb.GetUserByEmailResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByEmail indicates an expected call of GetUserByEmail.
func (mr *MockClientInterfaceMockRecorder) GetUserByEmail(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByEmail", reflect.TypeOf((*MockClientInterface)(nil).GetUserByEmail), arg0, arg1)
}

// GetUserByID mocks base method.
func (m *MockClientInterface) GetUserByID(arg0 context.Context, arg1 string) (*pb.GetUserByIdResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByID", arg0, arg1)
	ret0, _ := ret[0].(*pb.GetUserByIdResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByID indicates an expected call of GetUserByID.
func (mr *MockClientInterfaceMockRecorder) GetUserByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByID", reflect.TypeOf((*MockClientInterface)(nil).GetUserByID), arg0, arg1)
}

// RemoveCartTx mocks base method.
func (m *MockClientInterface) RemoveCartTx(arg0 context.Context, arg1 string) (*cart.RemoveCartTxResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveCartTx", arg0, arg1)
	ret0, _ := ret[0].(*cart.RemoveCartTxResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveCartTx indicates an expected call of RemoveCartTx.
func (mr *MockClientInterfaceMockRecorder) RemoveCartTx(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveCartTx", reflect.TypeOf((*MockClientInterface)(nil).RemoveCartTx), arg0, arg1)
}
